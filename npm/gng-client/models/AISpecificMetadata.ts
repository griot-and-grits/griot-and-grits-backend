/* tslint:disable */
/* eslint-disable */
/**
 * Griot and Grits API
 * Griot and Grits API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AIContribution } from './AIContribution';
import {
    AIContributionFromJSON,
    AIContributionFromJSONTyped,
    AIContributionToJSON,
    AIContributionToJSONTyped,
} from './AIContribution';

/**
 * 
 * @export
 * @interface AISpecificMetadata
 */
export interface AISpecificMetadata {
    /**
     * 
     * @type {Array<AIContribution>}
     * @memberof AISpecificMetadata
     */
    contributions?: Array<AIContribution>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AISpecificMetadata
     */
    ethicalConsiderations?: Array<string>;
}

/**
 * Check if a given object implements the AISpecificMetadata interface.
 */
export function instanceOfAISpecificMetadata(value: object): value is AISpecificMetadata {
    return true;
}

export function AISpecificMetadataFromJSON(json: any): AISpecificMetadata {
    return AISpecificMetadataFromJSONTyped(json, false);
}

export function AISpecificMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): AISpecificMetadata {
    if (json == null) {
        return json;
    }
    return {
        
        'contributions': json['contributions'] == null ? undefined : ((json['contributions'] as Array<any>).map(AIContributionFromJSON)),
        'ethicalConsiderations': json['ethical_considerations'] == null ? undefined : json['ethical_considerations'],
    };
}

export function AISpecificMetadataToJSON(json: any): AISpecificMetadata {
    return AISpecificMetadataToJSONTyped(json, false);
}

export function AISpecificMetadataToJSONTyped(value?: AISpecificMetadata | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'contributions': value['contributions'] == null ? undefined : ((value['contributions'] as Array<any>).map(AIContributionToJSON)),
        'ethical_considerations': value['ethicalConsiderations'],
    };
}

