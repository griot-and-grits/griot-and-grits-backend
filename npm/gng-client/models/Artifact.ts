/* tslint:disable */
/* eslint-disable */
/**
 * Griot and Grits API
 * Griot and Grits API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Meta } from './Meta';
import {
    MetaFromJSON,
    MetaFromJSONTyped,
    MetaToJSON,
    MetaToJSONTyped,
} from './Meta';
import type { AISpecificMetadata } from './AISpecificMetadata';
import {
    AISpecificMetadataFromJSON,
    AISpecificMetadataFromJSONTyped,
    AISpecificMetadataToJSON,
    AISpecificMetadataToJSONTyped,
} from './AISpecificMetadata';
import type { ContentInfo } from './ContentInfo';
import {
    ContentInfoFromJSON,
    ContentInfoFromJSONTyped,
    ContentInfoToJSON,
    ContentInfoToJSONTyped,
} from './ContentInfo';
import type { ArchivalInfo } from './ArchivalInfo';
import {
    ArchivalInfoFromJSON,
    ArchivalInfoFromJSONTyped,
    ArchivalInfoToJSON,
    ArchivalInfoToJSONTyped,
} from './ArchivalInfo';
import type { Licensing } from './Licensing';
import {
    LicensingFromJSON,
    LicensingFromJSONTyped,
    LicensingToJSON,
    LicensingToJSONTyped,
} from './Licensing';

/**
 * 
 * @export
 * @interface Artifact
 */
export interface Artifact {
    /**
     * The title of the artifact.
     * @type {string}
     * @memberof Artifact
     */
    title: string;
    /**
     * A description of the artifact.
     * @type {string}
     * @memberof Artifact
     */
    description: string;
    /**
     * 
     * @type {Meta}
     * @memberof Artifact
     */
    meta?: Meta | null;
    /**
     * 
     * @type {ContentInfo}
     * @memberof Artifact
     */
    content?: ContentInfo | null;
    /**
     * Date that this artifact was recorded into library
     * @type {string}
     * @memberof Artifact
     */
    recordedDate: string;
    /**
     * 
     * @type {ArchivalInfo}
     * @memberof Artifact
     */
    archivalInfo: ArchivalInfo;
    /**
     * 
     * @type {AISpecificMetadata}
     * @memberof Artifact
     */
    aiSpecificMetadata: AISpecificMetadata | null;
    /**
     * 
     * @type {Licensing}
     * @memberof Artifact
     */
    licensing?: Licensing | null;
    /**
     * 
     * @type {number}
     * @memberof Artifact
     */
    version?: number;
}

/**
 * Check if a given object implements the Artifact interface.
 */
export function instanceOfArtifact(value: object): value is Artifact {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('recordedDate' in value) || value['recordedDate'] === undefined) return false;
    if (!('archivalInfo' in value) || value['archivalInfo'] === undefined) return false;
    if (!('aiSpecificMetadata' in value) || value['aiSpecificMetadata'] === undefined) return false;
    return true;
}

export function ArtifactFromJSON(json: any): Artifact {
    return ArtifactFromJSONTyped(json, false);
}

export function ArtifactFromJSONTyped(json: any, ignoreDiscriminator: boolean): Artifact {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'],
        'description': json['description'],
        'meta': json['meta'] == null ? undefined : MetaFromJSON(json['meta']),
        'content': json['content'] == null ? undefined : ContentInfoFromJSON(json['content']),
        'recordedDate': json['recorded_date'],
        'archivalInfo': ArchivalInfoFromJSON(json['archival_info']),
        'aiSpecificMetadata': AISpecificMetadataFromJSON(json['ai_specific_metadata']),
        'licensing': json['licensing'] == null ? undefined : LicensingFromJSON(json['licensing']),
        'version': json['version'] == null ? undefined : json['version'],
    };
}

export function ArtifactToJSON(json: any): Artifact {
    return ArtifactToJSONTyped(json, false);
}

export function ArtifactToJSONTyped(value?: Artifact | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'meta': MetaToJSON(value['meta']),
        'content': ContentInfoToJSON(value['content']),
        'recorded_date': value['recordedDate'],
        'archival_info': ArchivalInfoToJSON(value['archivalInfo']),
        'ai_specific_metadata': AISpecificMetadataToJSON(value['aiSpecificMetadata']),
        'licensing': LicensingToJSON(value['licensing']),
        'version': value['version'],
    };
}

